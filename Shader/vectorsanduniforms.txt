Typical shader structure:

#version version_number
in type in_variable_name;
in type in_variable_name;

out type out_variable_name;

uniform type uniform_name;

void main() {
    //process inputs and do graphics stuff
    ...
    //output processed stuff to output variable
    out_variable_name = stuff_processed
}


To find out the number of 4-component VAs available:
int nrAttributes;
glGetIntegerv(GL_MAX_VERTEX_ATTRIBS, &nrAttributes);
cout << "Maximum no. of vertex attributes supported: " << nrAttributes << endl;


Vectors
- n component container for basic types (1<=n<=4)
- vecn, bvecn, ivecn, etc. 
- b = boolean, i = int, u = unsigned int, d = double


Swizzling:
- vec2 someVec;
- vec4 differentVec = someVec.xyxx;
- vec3 anotherVec = differentVec.zyw;
- vec4 otherVec = someVec.xxxx + anotherVec.yxzy;
- vec2 vect = vec2(0.5, 0.7);
- vec4 result = vec4(vect, 0.0, 0.0);
- vec4 otherResult = vec4(result.xyz, 1.0);


Vertex shaders:
- each input variable -> vertex attribute
- receives input straight from vertex data

To define how the vertex data is organized, we specify the input variables 
with location metadata so we can configure the vertex attributes on the CPU. 
We've seen this as layout (location = 0). 
The vertex shader thus requires an extra layout specification for its inputs 
so we can link it with the vertex data.


Fragment shader: requires a vec4 color output variable.


Uniforms
- global: unique per shader program object
- can be accessed from any shader at any stage in the shader program
- once set, keep their values until reset or updated

NOTE: in the main function, the shader must be activated 
before any calls to glUniform are made.


glGetUniformLocation fn:
- queries for the location of a uniform
- two arguments
- first: name/id of shader program object
- second: name of the uniform (in double quotes)
- if fn returns -1, could not find the location

NOTE: finding the uniform location does not require you to use the shader program first, 
but updating a uniform does require you to first use the program (by calling glUseProgram), 
because it sets the uniform on the currently active shader program.


glUniform fn:
The function requires a specific postfix for the type of the uniform you want to set. 
A few of the possible postfixes are:

f: the function expects a float as its value.
i: the function expects an int as its value.
ui: the function expects an unsigned int as its value.
3f: the function expects 3 floats as its value.
fv: the function expects a float vector/array as its value.

Whenever you want to configure an option of OpenGL, pick the overloaded function that corresponds with your type. 
To set 4 floats of the uniform individually, we pass our data via glUniform4f.

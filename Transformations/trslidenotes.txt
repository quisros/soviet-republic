￼

2D transformations

Let 2x2 transformation matrix be [a b || c d].

Uniform/isotropic scaling: b=c=0, a=d=s
Nonuniform/anisotropic scaling: b=c=0, a=s, b=t
Rotation: a=cos, b=-sin, c=sin, d=cos

Reflection about y axis: b=c=0, a=-1, d=1
Shearing in x: a=d=1, b=s, c=0
Shearing in y: a=d=1, b=0, c=s

Rigid transformations
- square remains square
- preserves lengths and angles
- rotations and translations

Affine transformations
- preserves parallelism
- rotations, translations, scaling and shears

Cannot carry out translation using 2x2 matrix multiplication.


Homogenous coordinates

(x, y) in 2D becomes (x, y, 1) in homogenous coordinates.
A general point in homogenous coordinates can be mapped back to usual non-homogenous coordinates by dividing with homogenous dimension.
￼
Translation: b=c=0, a=d=1, l=s, m=t
Scaling/rotation/shear work as before with l=m=0

Concatenations

- successive translations: additive
- successive scalings: multiplicative
- succesive rotations: additive

1) rotation about arbitrary point A
- translate A to O
- rotate about O
- translate back to A

2) reflection about arbitrary line L
- translate system such that L now passes through O
- rotate system so that L becomes parallel to x axis
- reflect object about L (i.e. reflection about x axis)
- reverse rotate system to original inclination
- reverse translate system by same amount


 3D transformations

Rotation matrices are orthogonal (det = 1).

To do shear transformation: take 4x4 identity matrix, then fill remaining entries in the upper left 3x3 matrix as desired.

Rotating cube about arbitrary axis passing through P:
- translate axis to pass through origin
- bring OP into xz plane
- rotate OP to coincide with z axis
- make rotation by desired angle
- reverse all previously applied transformations

Multiplication of transforming matrix with vertex has to be done explicitly in the shader.

Matrix definitions are column-major.

Steps

Local space ---- model matrix ----> world space ---- view matrix ----> view space 
---- projection matrix ----> clip space ---- viewport transform ----> screen space

1. Local coordinates = starting coordinates
2. World space coords = coords relative to world's global origin, along with other objects
3. View space coords = coords as seen from viewing point
4. Clip coords = coords processed to lie in -1 to 1; perspective projection can be added here
5. Screen coords = coords in range defined by glViewport. These are then sent to rasterizer

If only a part of a primitive is outside the clipping volume, 
OpenGL will reconstruct it as multiple primitives to fit inside the clipping range.
Projection matrix transforms view space coords to coords which lie inside the range.

Frustum: viewing box created by projection matrix
Projection matrix projects 3D coordinates to the easy-to-map-to-2D NDC.
Matrix usually can have two different forms, where each defines its own unique frustum:
orthographic or perspective projection matrix.

Perspective division: x,y,z, components of posn vectos are divided by the vector's
homogenous w compnent. Automatically done at the end of the vertex shader step.


Orthographic projection

Frustum: cuboid-like container. It directly maps all coords inside it to NDCs.
w component remains unchanged.

glm::ortho fn has six parameters specifying ranges of x,y,z coords allowed.
However this type of projection is unrealistic as it doesn't consider perspective.


Perspective projection

PP matrix, while mapping from view to clip space, manipulates w value such that 
the further away a vertex coord from the viewer, the higher its w component becomes.
After coords are in clip space, perspective division is applied to them.

glm::perspective fn:
- first arg: defines fov value; usually 45 degrees for realistic view
- second arg: aspect ratio; viewport's width divided by height
- third and fourth arg: set near and far plane of frustum (usually 0.1 and 100.0)


Clipped coords are the ones assigned to gl_Position in the vertex shader.
OpenGL automatically does perspective division to get NDCs.
glViewport parameters are used to map NDCs to screen coords.
